{"version":3,"sources":["services/ProjectService.ts","features/project/ProjectListItem.tsx","features/project/ProjectContainer.tsx","features/project/ProjectContainerProcess.tsx","features/project/ProjectContainerFinish.tsx","features/HomePage.tsx","hooks/redux.ts","features/project/ProjectDetails.tsx","features/CardPage.tsx","features/project/ModalWindow.tsx","features/project/SearchBar.tsx","features/Header.tsx","features/project/Footer.tsx","App.tsx","features/project/projectSlice.tsx","features/counter/counterSlice.ts","store/store.tsx","index.tsx"],"names":["projectAPI","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","fetchAllProjects","query","limit","url","params","_limit","providesTags","result","fetchProjectById","id","method","fetchProjectByNameSearch","searchText","createProject","mutation","project","body","invalidatesTags","updateProject","deleteProject","ProjectListItem","Card","Body","className","src","imageUrl","width","alt","Title","title","Text","replace","to","role","ProjectContainer","useState","useFetchAllProjectsQuery","projects","data","error","isLoading","border","style","Header","color","as","height","overflow","filter","status","map","key","HomePage","display","margin","padding","ProjectContainerProcess","ProjectContainerFinish","useAppSelector","useSelector","ProjectDetails","update","remove","state","counterReducer","value","useDispatch","aria-label","cursor","background","borderRadius","Img","variant","Button","onClick","event","prompt","stopPropagation","window","confirm","location","href","CardPage","useUpdateProjectMutation","UpdateError","UpdateIsLoading","useDeleteProjectMutation","DeleteError","DeleteIsLoading","useParams","useFetchProjectByIdQuery","console","log","ModalWindow","nameButton","children","onHandleSubmit","disabled","show","setShow","handleClose","Modal","onHide","closeButton","Footer","SearchBar","filterData","setFilterData","wordEntered","setWordEntered","clearSearchState","Form","paddingLeft","justifyContent","alignItems","backgroundColor","type","outline","placeholder","onChange","searchWord","target","newFilter","toLowerCase","includes","textTransform","borderStyle","length","position","textDecoration","defaultFormValues","useCreateProjectMutation","CreateError","CreateIsLoading","projectInput","setProjectInput","isDirty","setIsDirty","validationState","isInvalid","message","getFieldValidation","fieldName","x","some","messages","getFormIsValid","handleCreate1","a","Navbar","bg","expand","fixed","Container","fluid","Toggle","aria-controls","Collapse","Nav","maxHeight","navbarScroll","action","htmlFor","e","data-mdb-ripple-color","App","exact","path","component","projectSlice","createSlice","name","initialState","reducers","counterSlice","increase","decrease","actions","rootReducer","combineReducers","productReducer","reducer","store","configureStore","middleware","getDefaultMiddleware","concat","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f2dcf151.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query/react\";\nimport { IProject } from \"../models/IProject\";\n\n\nexport const projectAPI = createApi({\n    reducerPath: 'projectAPI',\n    baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000/' }),\n    tagTypes: ['Project'],\n    endpoints: (build) => ({\n        fetchAllProjects: build.query<IProject[], number>({\n            query: (limit: number = 10) => ({\n                url: `/projects`,\n                params: {\n                    _limit: limit\n                }\n            }),\n            providesTags: result => ['Project']\n        }),\n        fetchProjectById: build.query<IProject, number>({\n            query: (id) => ({\n                url: `/projects/${id}`,\n                method: 'GET',\n            }),\n            providesTags: result => ['Project']\n        }),\n        fetchProjectByNameSearch: build.query<IProject[], string>({\n            query: (searchText: string) => ({\n                url: `/projects?q=${searchText}`,\n                method: 'GET',\n            }),\n            providesTags: result => ['Project']\n        }),\n        createProject: build.mutation<IProject, IProject>({\n            query: (project) => ({\n                url: `/projects`,\n                method: 'POST',\n                body: project\n\n            }),\n            invalidatesTags:  ['Project']\n        }),\n        updateProject: build.mutation<IProject, IProject>({\n            query: (project) => ({\n                url: `/projects/${project.id}`,\n                method: 'PUT',\n                body: project\n\n            }),\n            invalidatesTags:  ['Project']\n        }),\n        deleteProject: build.mutation<IProject, IProject>({\n            query: (project) => ({\n                url: `/projects/${project.id}`,\n                method: 'DELETE'\n            }),\n            invalidatesTags:  ['Project']\n        }),\n\n    })\n})","import React from \"react\";\n\nimport { Button, Card, FormControl } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { IProject } from '../../models/IProject';\nimport { lineClamp } from '@tailwindcss/line-clamp';\n\n\n\ninterface ProjectListItem {\n    project: IProject;\n    // update: (project: IProject) => void;\n    // remove: (project: IProject) => void;\n}\n\nconst ProjectListItem: React.FC<ProjectListItem> = ({ project }) => {\n\n    // \"id\": 1,\n    // \"imageUrl\": \"some url here\",\n    // \"name\": \"Product name\",\n    // \"count\": 4,\n    // \"size\": {\n    //     \"width\": 200,\n    //     \"height\": 200\n    //     },\n    // \"weight\": \"200g\",\n    // \"comments\": [\"CommentModel\", \"CommentModel\"]\n\n    // const handleDelete = (event: React.MouseEvent) => {\n    //     event.stopPropagation();\n    //     remove(project)\n\n    // };\n    // const handleUpdate = (event: React.MouseEvent) => {\n    //     const title = prompt() || \"\"\n    //     update({ ...project, title } as IProject)\n\n    // }\n\n    return (\n        <div>\n            {/* <div className=\"${tw`max-w-xs mx-auto ${lineClamp(3)} md:${lineClamp('none')}`}\">\n\n\"have noticed that all of the tutorials on this site have a dashed line running through the center of each step, both in the horizontal and vertical direction. If students make their own centered lines on their own paper, before drawing, they will have an easy reference to follow. The more realistic kangaroo tutorial even has an extra set, for a total of 16 boxes, to help older students be a little more precise.\"\n            </div> */}\n            <Card >\n                <Card.Body >\n                      <img className=\"ml-3\" src={project.imageUrl} width='96px' alt=\"Generic placeholder image\"/>\n                     \n                    <Card.Title>{project.id}. {project.title}</Card.Title>\n                    <Card.Text >\n                    {/* className=\"${tw`${lineClamp(3)}`}\" */}\n                    {project.body.replace(/(.{58})..+/, `$1...`)}  \n                            {/* {project.body} */}\n                    </Card.Text>\n                    <Link to={`/card/${project.id}`} role=\"button\">More to</Link>\n                </Card.Body>\n            </Card>\n            <div className=\"media\"\n            // onClick={handleUpdate}\n            >\n                {/* {project.id}. {project.title} */}\n                {/* <button onClick={handleDelete}>delete</button> */}\n                {/* <button onClick={handleUpdate}>edit</button> */}\n                {/* <button  href=\"/card/id\" >details</button> */}\n                {/* <Link to={`/card/${project.id}`} role=\"button\">Detailes</Link> */}\n            </div>\n        </div>\n    )\n}\n\nexport default ProjectListItem\n","import React, { useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { projectAPI } from \"../../services/ProjectService\"\nimport ProjectListItem from \"./ProjectListItem\"\n\nconst ProjectContainer = () => {\n\n    const [limit, setLimit] = useState(15);\n    const { data: projects, error, isLoading } = projectAPI.useFetchAllProjectsQuery(limit);\n    // const [createProject, { error: CreateError, isLoading: CreateIsLoading }] = projectAPI.useCreateProjectMutation()\n    // const [deleteProject, { }] = projectAPI.useDeleteProjectMutation();\n    // const [updateProject, { }] = projectAPI.useUpdateProjectMutation();\n\n\n    // const handleCreate = async () => {\n    //     const title = prompt();\n    //     await createProject({ title, body: title } as IProject)\n\n    // }\n    // const handleUpdate = (project: IProject) => {\n    //     updateProject(project)\n    // }\n    // const handleRemove = (project: IProject) => {\n    //     deleteProject(project)\n    // }\n\n    return (\n        <div >\n            {/* {CreateIsLoading && <h1>Loading create project...</h1>}\n            {CreateError && <h1>Error creative...</h1>}\n            <button onClick={handleCreate}>Create project</button> */}\n\n            <Card border=\"success\" style={{ width: '18rem' }}>\n            <Card.Header style={{ color: \"green\"}} as=\"h6\" >Active</Card.Header>        \n            <div style={{ height: \"42em\", overflow: \"auto\" }}>\n                {isLoading && <h1>Loading...</h1>}\n                {error && <h1>Error download...</h1>}\n                {projects && projects.filter(project => project.status == \"active\").map(project =>\n                    <ProjectListItem project={project} key={project.id} />\n                )}\n            </div>\n        </Card>\n        </div>\n    )\n}\n\nexport default ProjectContainer\n","import React, { useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { projectAPI } from \"../../services/ProjectService\"\nimport ProjectListItem from \"./ProjectListItem\"\n\nconst ProjectContainer = () => {\n\n    const [limit, setLimit] = useState(10);\n    const { data: projects, error, isLoading } = projectAPI.useFetchAllProjectsQuery(limit);\n    \n    return (\n        <div >\n           \n            <Card border=\"warning\" style={{ width: '18rem' }}>\n                <Card.Header style={{ color: \"#FFB700\" }} as=\"h6\" >Process</Card.Header>\n                <div style={{ height: \"42em\", overflow: \"auto\" }}>\n                    {isLoading && <h1>Loading...</h1>}\n                    {error && <h1>Error download...</h1>}\n                    {projects && projects.filter(project => project.status == \"process\").map(project =>\n                    <ProjectListItem project={project} key={project.id} />\n                )}\n                    \n                     \n                </div>\n            </Card>\n        </div>\n\n    )\n}\n\nexport default ProjectContainer\n","import React, { useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { projectAPI } from \"../../services/ProjectService\"\nimport ProjectListItem from \"./ProjectListItem\"\n\nconst ProjectContainer = () => {\n\n    // const [limit, setLimit] = useState(10);\n    const { data: projects, error, isLoading } = projectAPI.useFetchAllProjectsQuery(10);\n    \n    return (\n        <div >\n            <Card border=\"info\" style={{ width: '18rem' }}>\n                <Card.Header style={{ color: \"#03C5EE\" }} as=\"h6\" >Finish</Card.Header>\n                <div style={{ height: \"42em\", overflow: \"auto\" }}>\n                    {isLoading && <h1>Loading...</h1>}\n                    {error && <h1>Error download...</h1>}\n                    {projects && projects.filter(project => project.status == \"finish\").map(project =>\n                    <ProjectListItem project={project} key={project.id} />\n                )}\n                </div>\n            </Card>\n        </div>\n    )\n}\n\nexport default ProjectContainer\n","import React from \"react\";\nimport { RootStateOrAny, useDispatch, useSelector } from \"react-redux\";\nimport { decrease, increase } from \"./counter/counterSlice\";\nimport { useAppSelector } from \"../hooks/redux\";\nimport ProjectContainer from \"./project/ProjectContainer\";\nimport ProjectContainerProcess from \"./project/ProjectContainerProcess\";\nimport ProjectContainerFinish from \"./project/ProjectContainerFinish\";\nimport SearchBar from \"./project/SearchBar\";\n\nconst HomePage = () => {\n\n  // const value = useAppSelector(state => state.counterReducer.value);\n  // const dispatch = useDispatch();\n\n  return (\n    <div style={{ display: 'flex' }}>\n\n      {/* <div style={{ margin: '4%' }}><h1>{value}</h1>\n        <button onClick={() => dispatch(increase())}> increase </button>\n        <button onClick={() => dispatch(decrease())}> decrease </button>\n      </div > */}\n\n      <span style={{ display: 'flex', margin: '70px 50px 30px 14.5em', padding: 'right:30px' }} >\n        <span style={{ margin: '0 2%' }}>\n          <ProjectContainer />\n        </span>\n        <span style={{ margin: '0 2%' }}>\n          <ProjectContainerProcess />\n        </span>\n        <span style={{ margin: '0 2%' }}>\n          <ProjectContainerFinish />\n        </span>\n      </span>\n    </div>\n  );\n};\n\nexport default HomePage;\n","\n\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatch, RootState} from \"../store/store\";\n\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from \"react\";\nimport { Button, Card } from \"react-bootstrap\"\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport { IProject } from \"../../models/IProject\"\nimport { decrease, increase } from \"../counter/counterSlice\";\n\ninterface ProjectDetails {\n    project: IProject,\n    update: (project: IProject) => void;\n    remove: (project: IProject) => void;\n}\n\nconst ProjectDetails: React.FC<ProjectDetails> = ({ project, update, remove }) => {\n\n    const value = useAppSelector(state => state.counterReducer.value);\n    const dispatch = useDispatch();\n\n    const handleUpdate = (event: React.MouseEvent) => {\n\n        const title = prompt();\n        if (title) {\n            if (title !== '') {\n                update({ ...project, title } as IProject)\n            } else return\n        } else {\n            return\n        }\n\n    }\n    const handleDelete = (event: React.MouseEvent) => {\n        event.stopPropagation();\n        if (window.confirm(\"Really delete this project?\")) {\n            remove(project);\n            window.location.href = \"/\";\n        } else return\n    };\n   \n\n    return (\n        <div  >\n            <Card style={{ width: '70%' }}  >\n                \n                <Link aria-label=\"Close\"\n                    className=\"position-absolute top-0 end-0\"\n                    to=\"/projects\"\n                    style={{\n                        color: \"black\",\n                        margin: '0.5em 0.5em 0.5em ',\n                        cursor: \"pointer\",\n                        width: \"3%\",\n                        background: 'white',\n                        borderRadius: \"5px\",\n                    }} ><i className=\"bi bi-x-lg\"  style={{margin: '0.2em 0.2em 0.5em ',}}></i>\n                </Link>\n                \n                {/* <div style={{ margin: '4%' }}><h1>{value}</h1>\n                    <button className=\"me-2\" onClick={() => dispatch(decrease())}>-</button>\n                    <button onClick={() => dispatch(increase())}>+</button>\n                </div > */}\n\n                <Card.Img variant=\"top\" src={project.imageUrl} />\n                {/* <img  /> */}\n                <Card.Body>\n                    <Card.Title> {project.id}. {project.title}</Card.Title>\n\n                    <Card.Text>\n                        {project.body}\n                    </Card.Text>\n                    <Button variant=\"primary\" className=\"me-2\" onClick={handleUpdate}>Edit</Button>\n                    <Button variant=\"primary\" onClick={handleDelete} >Delete</Button>\n\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default ProjectDetails\n","import React from \"react\";\nimport ProjectDetails from \"./project/ProjectDetails\";\nimport { IProject } from \"../models/IProject\";\nimport { useParams } from 'react-router-dom';\nimport { projectAPI } from \"../services/ProjectService\";\n\n\n\ninterface CardPage {\n    project: IProject\n}\n\nconst CardPage: React.FC<CardPage> = () => {\n\n    const [updateProject, {error: UpdateError, isLoading: UpdateIsLoading }] = projectAPI.useUpdateProjectMutation();\n    const [deleteProject, {error: DeleteError, isLoading: DeleteIsLoading }] = projectAPI.useDeleteProjectMutation();\n\n\n    let { id } = useParams<{ id }>();\n    const { data: project, error, isLoading } = projectAPI.useFetchProjectByIdQuery(id);\n    console.log(project);\n\n    const erroeMassege = () => {\n        return (<h1>\"Can not fetch details\"</h1>)\n    }\n    console.log('id', id);\n\n    const handleUpdate = (project: IProject) => {\n        updateProject(project)\n    }\n    const handleRemove = (project: IProject) => {\n        deleteProject(project)\n    }\n\n    return (\n            <div style={{ margin: '5% 2% 30% 20%' }}>\n                {error && <h1>Error find...</h1>}\n                {isLoading && <h1>Loading find by id project...</h1>}\n                {DeleteError && <h1>Error delete...</h1>}\n                {DeleteIsLoading && <h1>Loading Delete project...</h1>}\n                {UpdateError && <h1>Error update...</h1>}\n                {UpdateIsLoading && <h1>Loading update project...</h1>}\n                {(project) ? <ProjectDetails project={project}  update={handleUpdate}  remove={handleRemove} /> : erroeMassege()}\n            </div>\n    )\n}\n\nexport default CardPage\n","import React from \"react\";\n\nimport { Button, Modal } from \"react-bootstrap\"\nimport { useState } from \"react\";\n\n\nconst ModalWindow = ({ title, nameButton, children, onHandleSubmit, disabled }) => {\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const onSubmit = () => {\n        onHandleSubmit();\n        setShow(false);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outline-success\" className=\"me-2\" onClick={handleShow}>\n                {title}\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {children}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                   \n                    <Button variant=\"primary\"\n                        disabled={disabled}\n                        onClick={onSubmit} >\n                        {nameButton}\n                    </Button>\n                    \n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nexport default ModalWindow\n","import { Button, Card, Form, FormControl, FormFloating } from \"react-bootstrap\"\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport { useAppSelector } from \"../../hooks/redux\";\nimport { projectAPI } from \"../../services/ProjectService\";\nimport { IProject } from \"../../models/IProject\";\n\n\nconst SearchBar = () => {\n\n    const [filterData, setFilterData] = useState([] as any);\n    const [wordEntered, setWordEntered] = useState(\"\");\n    const { data: projects, error, isLoading } = projectAPI.useFetchAllProjectsQuery(15);\n    // , {skip: wordEntered === \"\"}\n\n    const handleFilter = (event) => {\n\n        const searchWord = event.target.value;\n        setWordEntered(searchWord);\n\n        if (searchWord === \"\") {\n            setFilterData([]);\n        } else {\n            const newFilter = projects && projects.filter(project => {\n                return project.title.toLowerCase().includes(searchWord.toLowerCase())\n            });\n            setFilterData(newFilter);\n        }\n    };\n\n    const clearSearchState = () => {\n        setFilterData([]);\n        setWordEntered(\"\");\n    };\n\n    return (\n        <div >\n            {isLoading && <h1>Loading search...</h1>}\n            {error && <h1>Error searching...</h1>}\n            <Form className=\"d-flex\" style={{\n                display: \"flex\",\n                paddingLeft: \"10px\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                margin: \"auto\",\n                backgroundColor: \"white\",\n                borderRadius: \"5px\",\n                border: \"1px solid green\",\n            }}>\n                <input\n                    type=\"text\"\n                    // className=\"   \"\n                    style={{\n                        width: \"100%\",\n                        // height: \"54px\",\n                        background: \"none\",\n                        border: \"0\",\n                        padding: \"0\",\n                        outline: \"none\",\n                    }}\n                    placeholder=\"Search\"\n                    // className=\"me-2\"\n                    aria-label=\"Search\"\n                    onChange={handleFilter}\n                    value={wordEntered}\n                />\n                <Button variant=\"secondary\"\n                    style={{\n                        backgroundColor: \"white\",\n                        color: \"green\",\n                        textTransform: \"uppercase\",\n                        borderStyle: \"none\",\n                        borderRadius: \"5px\",\n                        cursor: \"pointer\",\n                        outline: \"none\",\n                    }}\n                    type=\"button\"\n                    onClick={clearSearchState}>\n                    {wordEntered.length === 0 ? <i className=\"bi bi-search\"></i> : <i className=\"bi bi-x-lg\" ></i>}\n                </Button>\n            </Form>\n            {filterData.length != 0 && (\n                <Card className=\"results\" style={{\n                    width: \"12.1em\",\n                    overflow: \"auto\",\n                    position: \"absolute\",\n                }}>\n                    {filterData.map((project) => <Link to={`/card/${project.id}`} onClick={clearSearchState} style={{ textDecoration: \"none\" }}>{project.title}</Link>)}\n                </Card>\n            )\n            }\n        </div>\n    )\n}\n\nexport default SearchBar\n","import React, { useCallback, useState } from 'react';\nimport { Navbar, Nav, Container, Form, FormControl, Button } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { isJSDocVariadicType } from 'typescript';\nimport { IProject } from '../models/IProject';\nimport { projectAPI } from '../services/ProjectService';\nimport ModalWindow from './project/ModalWindow';\nimport projectSlice from './project/projectSlice';\nimport SearchBar from './project/SearchBar';\n\n// interface Header {\n//     project: IProject\n// }\n\nconst defaultFormValues = {\n    imageUrl: '',\n    title: '',\n    body: ''\n};\n\ntype FieldName = \"title\" | \"body\" | \"imageUrl\";\n\nconst Header = () => {\n\n    const [createProject, { error: CreateError, isLoading: CreateIsLoading }] = projectAPI.useCreateProjectMutation()\n\n    // const handleCreate = async () => {\n    //     const title = prompt();\n    //     if (title === \"\") {\n    //         <h1>Title empty...</h1>\n    //     } else await createProject({ title, body: title, status: \"active\" } as IProject)\n    // }\n\n    // Form =>\n    const [projectInput, setProjectInput] = useState<{ title: string, body: string, imageUrl: string }>(defaultFormValues);\n    const [isDirty, setIsDirty] = useState<{ [id: string]: boolean }>({ title: false });\n\n\n    const validationState: { [id: string]: { isInvalid: boolean, message: string }[] } = {\n        \"title\": [\n            { isInvalid: projectInput.title === \"\", message: \"Title can not be empty\" },\n            { isInvalid: (projectInput.title !== \"\") && projectInput.title?.length < 3, message: \"Title is too short\" },\n        ],\n        \"body\": [\n            { isInvalid: projectInput.body === \"\", message: \"Body can not be empty\" },\n        ]\n    };\n\n    const getFieldValidation = (fieldName: FieldName) => {\n        const result = validationState[fieldName];\n        var isInvalid = result.map(x => x.isInvalid).some(x => x);\n        var messages = result.filter(x => x.isInvalid).map(x => x.message);\n        return {\n            isInvalid: isInvalid,\n            messages\n        }\n    };\n\n    const getFormIsValid = () => {\n        return !getFieldValidation(\"title\").isInvalid &&\n            !getFieldValidation(\"body\").isInvalid;\n    };\n\n    const handleCreate1 = async () => {\n        const title = projectInput.title;\n        const body = projectInput.body;\n\n        if (!getFormIsValid()) {(\n           <h1>Input empty...</h1>\n        )} else {\n            await createProject({ title, imageUrl: \"https://source.unsplash.com/1600x900/?project-art\", body, status: \"active\" } as IProject);\n            setProjectInput(defaultFormValues);\n        }\n    }\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\"\n            //  sticky=\"top\"\n            fixed=\"top\"\n        >\n            <Container fluid>\n                {/* <Navbar.Brand href=\"/\">Logo</Navbar.Brand> */}\n                <Link to=\"/projects\" role=\"button\" style={{ textDecoration: \"none\", color: \"black\" }}>Logo</Link>\n                <Navbar.Toggle aria-controls=\"navbarScroll\" />\n                <Navbar.Collapse id=\"navbarScroll\" >\n                    <Nav\n                        className=\"me-auto my-2 my-lg-0\"\n                        style={{ maxHeight: '100px' }}\n                        navbarScroll\n                    >\n                    </Nav>\n                    <SearchBar />\n                    <Nav\n                        className=\"me-auto my-2 my-lg-0\"\n                        style={{ maxHeight: '100px' }}\n                        navbarScroll\n                    >\n                    </Nav>\n\n                    <ModalWindow title=\"Create Project\" nameButton=\"Save\" onHandleSubmit={handleCreate1} disabled={!getFormIsValid()} >\n\n                        <form className=\"row g-3\" action=\"create-form\" >\n                            <div className=\"col-md-4\">\n                                <div className=\"form-outline\">\n                                    <label htmlFor=\"validationDefault01\" className=\"form-label\">Title</label>\n                                    <input\n                                        type=\"text\"\n                                        className='form-control'\n                                        placeholder='title'\n                                        value={projectInput.title || \"\"}\n                                        onChange={e => {\n                                            setProjectInput({ ...projectInput, title: e.target.value });\n                                            setIsDirty({ ...isDirty, \"title\": true });\n                                        }\n                                        }\n                                    />\n                                </div>\n                            </div>\n                            <div style={{ backgroundColor: \"gold\" }}>\n                                {isDirty[\"title\"] && getFieldValidation(\"title\").messages}\n                            </div>\n\n                            <div className=\"\">\n                                <div className=\"form-outline\">\n                                    <label htmlFor=\"validationDefault01\" className=\"form-label\">Body</label>\n                                    <textarea\n                                        // type=\"text\"\n                                        className='form-control'\n                                        placeholder='body'\n                                        value={projectInput.body || \"\"}\n                                        onChange={e => {\n                                            setProjectInput({ ...projectInput, body: e.target.value });\n                                            setIsDirty({ ...isDirty, \"body\": true });\n                                        }}\n                                    />\n                                </div>\n                            </div>\n                            <div style={{ backgroundColor: \"gold\" }}>\n                                {isDirty[\"body\"] && getFieldValidation(\"body\").messages}\n                            </div>\n\n                        </form>\n                    </ModalWindow>\n                    {CreateIsLoading && <h1>Loading create project...</h1>}\n                    {CreateError && <h1>Error creative...</h1>}\n                    {/* <Button variant=\"outline-success\" className=\"me-2\" onClick={handleCreate}>Create Project</Button> */}\n                    <Button variant=\"success\">Log In</Button>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default Header\n","import React from \"react\";\n\n\nconst Footer = () => {\n    return (\n        <div>\n            <footer className=\"text-center text-white\" style={{backgroundColor: \"#F8F8F8\"}} >\n  {/* <!-- Grid container --> */}\n  <div className=\"container pt-4\">\n    {/* <!-- Section: Social media --> */}\n    <section className=\"mb-4\">\n      {/* <!-- Facebook -->\n      <a\n        className=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"#!\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        ><i className=\"fab fa-facebook-f\"></i\n      ></a> */}\n\n      {/* <!-- Twitter -->\n      <a\n        class=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"#!\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        ><i class=\"fab fa-twitter\"></i\n      ></a>\n\n      <!-- Google -->\n      <a\n        class=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"#!\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        ><i class=\"fab fa-google\"></i\n      ></a> */}\n\n      {/* <!-- Instagram -->\n      <a\n        class=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"#!\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        ><i class=\"fab fa-instagram\"></i\n      ></a> */}\n\n      {/* <!-- Linkedin --> */}\n      <a\n        className=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"https://www.linkedin.com/in/yarema-ostrovskiy/\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        ><i className=\"fab fa-linkedin\"></i>\n        <i className=\"bi bi-linkedin\"></i>\n        {/* <i className=\"bi bi-x-lg\" ></i> */}\n      </a>\n      {/* <!-- Github --> */}\n      <a\n        className=\"btn btn-link btn-floating btn-lg text-dark m-1\"\n        href=\"https://github.com/Yarema91/New_redux_product_app\"\n        role=\"button\"\n        data-mdb-ripple-color=\"dark\"\n        >\n            <i className=\"bi bi-github\"></i>\n      </a>\n    </section>\n    {/* <!-- Section: Social media --> */}\n  </div>\n  {/* <!-- Grid container --> */}\n\n  {/* <!-- Copyright --> */}\n  <div className=\"text-center text-dark p-3\" style={{backgroundColor: \"rgba(0, 0, 0, 0.2)\"}}>\n    © 2021 Copyright:\n    {/* <a className=\"text-dark\" href=\"https://mdbootstrap.com/\">MDBootstrap.com</a> */}\n  </div>\n  {/* <!-- Copyright --> */}\n</footer>\n        </div>\n    )\n}\n\nexport default Footer\n","import React from \"react\";\nimport { BrowserRouter, HashRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./features/HomePage\";\nimport CardPage from \"./features/CardPage\";\nimport Header from \"./features/Header\";\nimport Footer from \"./features/project/Footer\";\n// import { useAppSelector } from \"./hooks/redux\";\n\n\nconst App = () => {\n    // const {} = useAppSelector(state => state.productReducer.products);\n\n    return (\n       <HashRouter>\n        <Header />\n            <Switch>\n                <Route exact\n                    path=\"/projects\" component={HomePage}\n                />\n                <Route path=\"/card/:id\"\n                    component={CardPage}\n                />\n            </Switch>\n            <Footer />\n        </HashRouter>\n    )\n}\n\nexport default App\n","import React from \"react\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport {  IProject } from \"../../models/IProject\";\n\ninterface projectState {\n    projects: IProject[];\n    isLoading: boolean;\n    error: string;\n} \n\nconst initialState: projectState  = {\n    projects: [],\n    isLoading: false,\n    error: \"\"\n\n            // id: 4,\n            // imageUrl: \"some url here\",\n            // name: \"Product4\",\n            // count: 4,\n            // size: {\n            //     \"width\": 200,\n            //     \"height\": 200\n            // },\n            // weight: \"200g\",\n            // comments: [\"CommentModel\", \"CommentModel\"]\n}\n\n\nexport const projectSlice = createSlice ({\n    name: \"User\",\n    initialState,\n\n    reducers: {\n        projects: (state) => {\n            console.log('projects.state');\n            \n        }\n        // increase: (state) => {\n        //     state.value += 1;\n        //   },\n        //   decrease: (state) => {\n        //     state.value -= 1;\n        //   }\n    }\n})\n\n\n// export const { increase, decrease } = counterSlice.actions;\n\nexport default projectSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\n\n\nexport const counterSlice = createSlice ({\n    name: \"counter\",\n    initialState: {\n      value: 0\n    },\n    reducers: {\n        increase: (state) => {\n            state.value += 1;\n          },\n          decrease: (state) => {\n            state.value -= 1;\n          }\n\n    }\n})\n\n\nexport const { increase, decrease } = counterSlice.actions;\n\nexport default counterSlice.reducer;","import { combineReducers, configureStore, getDefaultMiddleware }  from \"@reduxjs/toolkit\";\n\nimport productReducer from \"../features/project/projectSlice\"\nimport counterReducer from \"../features/counter/counterSlice\";\nimport { projectAPI } from \"../services/ProjectService\";\n\n\nconst rootReducer = combineReducers({\n    productReducer,\n    counterReducer,\n    [projectAPI.reducerPath]: projectAPI.reducer\n})\n\nexport const setupStore = () => {\n    return configureStore({\n        // product: {\n        //     id: 1,\n        //     imageUrl: \"some url here\",\n        //     name: \"Product name\",\n        //     count: 4,\n        //     size: {\n        //         \"width\": 200,\n        //         \"height\": 200\n        //         },\n        //     weight: \"200g\",\n        //     comments: [\"CommentModel\", \"CommentModel\"]\n        // },\n     reducer: rootReducer,\n     middleware: (getDefaultMiddleware) => \n         getDefaultMiddleware().concat(projectAPI.middleware)\n    });\n\n}\n\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport type AppStore = ReturnType<typeof setupStore>\nexport type AppDispatch = AppStore['dispatch']\n \n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport { setupStore } from \"./store/store\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import url(\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.0/font/bootstrap-icons.css\");\n\n\nconst store = setupStore();\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}